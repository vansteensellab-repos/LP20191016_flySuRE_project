# vim: syntax=python expandtab
# coding: utf-8

import glob
import os.path
import sys
import inspect
import subprocess

# check if user config prevents source code has clean git state
ABORT_ON_DIRTY_GIT=True
try:
  tt=config['IGNORE_GIT_STATE']
  ABORT_ON_DIRTY_GIT=False
except KeyError:
  None

# check if snakefile originates from a 'clean' git repos
snakefilename = inspect.getframeinfo(inspect.currentframe()).filename
REPOSPATH = os.path.dirname(os.path.abspath(snakefilename))
repos_status = subprocess.run('cd '+REPOSPATH+'; [ -z "$( git status --porcelain )" ] && exit 0 || exit 1', stdout=subprocess.PIPE, shell=True, universal_newlines=True)
if ABORT_ON_DIRTY_GIT and repos_status.returncode != 0:
        print("\nYour snakefile is modified relative to the git repos", file=sys.stderr)
        print("Either undo your changes, or commit them", file=sys.stderr)
        print("Aborting\n\n", file=sys.stderr)
        sys.exit("")

# set code_base directory and retrieve hash of git commit
CODE_BASE = os.path.join(REPOSPATH, "code")
repos_commithash = subprocess.run('cd '+REPOSPATH+'; git log --pretty=format:"%H" -n 1', stdout=subprocess.PIPE, shell=True, universal_newlines=True)
GIT_COMMIT_HASH = repos_commithash.stdout

# print pipeline VERSION to stdout
VERSIONFILE = os.path.join(REPOSPATH, "VERSION")
with open(VERSIONFILE, 'r') as myfile:
    VERSION=myfile.read().replace('\n', '')
print ("SuRE-seq pipeline version: ", VERSION, "\n", "git commit hash: ", GIT_COMMIT_HASH, "\n\n")




CONDA_ENV               = os.path.join(CODE_BASE, 'SuRE_Counts2Pval_CondaEnv.yml')
R                       = "/usr/bin/Rscript --vanilla"
# SCRIPTS
GET_TOTAL_COUNTS          = os.path.join(CODE_BASE, "getTotalSuREcounts.sh")
NORMALIZE_COUNTS          = os.path.join(CODE_BASE, "normalizeSuREcounts.sh")
FILTER_DECON              = os.path.join(CODE_BASE, "filterDecon_SNPs.py")

NCORES                  = config["NCORES"]
OUTDIR                  = config["OUTDIR"]


# print(config.keys())
print(config["SAMPLENAMES"])
print(config["OUTDIR"])
print(config["SAMPLES"].keys())
print(expand(os.path.join(config["OUTDIR"],"{sample}","sampleTotalCounts.txt"), sample=config["SAMPLENAMES"]))


rule all:
  input: expand(os.path.join(config["OUTDIR"],"{sample}","sampleTotalCounts.txt"), sample=config["SAMPLENAMES"])

rule T01_getTotalCounts:
  input: expand(os.path.join(config["OUTDIR"],"{sample}","sampleTotalCounts.txt"), sample=config["SAMPLENAMES"])

T2_input = expand(os.path.join(config["OUTDIR"],"{sample}","02_normalized","{chr}.bedpe.norm.gz"), sample=config["SAMPLENAMES"], chr=config['CHRS'])
print("T2 = "+",".join(T2_input))

rule T02_normalizeCounts:
  input: T2_input

rule T05_FilterDeconvolute:
  input:
    expand(os.path.join(config["OUTDIR"],"{sample}","05_filterDecon","{chr}.bedpe.fltr.gz"), sample=config["SAMPLENAMES"], chr=config['CHRS'])

def count_tables_input(wildcards):
  return expand(os.path.join(config["SAMPLES"][wildcards.sample]["INDIR"], "count_tables","11_sorted","{chr}.bedpe.gz"), chr=config["CHRS"])

def count_colnames(wildcards):
  return(" ".join(["-c "+s for s in config["SAMPLES"][wildcards.sample]["REPLICATES"]]))

rule R01_getTotalCounts:
  input:
    count_tables_input
  output:
    # txt file with total counts for all samples in current genotype
    os.path.join(config["OUTDIR"],"{sample}","01_totalCounts","sampleTotalCounts.txt")
  params:
    count_cols = count_colnames
#  conda: CONDA_ENV
  log: os.path.join(config["OUTDIR"],"{sample}","01_totalCounts","sampleTotalCounts.log")
  shell:
    "bash {GET_TOTAL_COUNTS} -l {log} -o {output} -i count {params.count_cols} {input};"

def count_tables_input_chr(wildcards):
  return expand(os.path.join(config["SAMPLES"][wildcards.sample]["INDIR"], "count_tables","11_sorted",wildcards.chr+".bedpe.gz"))


rule R02_NormalizeSuREcounts:
  input:
    counts = count_tables_input_chr,
    totals = os.path.join(config["OUTDIR"],"{sample}","01_totalCounts","sampleTotalCounts.txt")
  output: 
    os.path.join(config["OUTDIR"],"{sample}","02_normalized","{chr}.bedpe.norm.gz")
  params:
    ipcr_col = "count",
    cdna_col = count_colnames
#  conda: CONDA_ENV
  log: os.path.join(config["OUTDIR"],"{sample}","02_normalized","{chr}.normalizedCounts.log")
  shell:
    "bash {NORMALIZE_COUNTS} -l {log} -o {output} -i {params.ipcr_col} {params.cdna_col} -d {input.counts} -t {input.totals};"
    
rule R05_FilterDeconvolute:
  input:
    os.path.join(config["OUTDIR"],"{sample}","02_normalized","{chr}.bedpe.norm.gz")
  output: 
    os.path.join(config["OUTDIR"],"{sample}","05_filterDecon","{chr}.bedpe.fltr.gz")
#  params:
#  conda: CONDA_ENV
  log: os.path.join(config["OUTDIR"],"{sample}","05_filterDecon","{chr}.filterDecon.log")
  shell:
    "python {FILTER_DECON} -i {input} -o {output} -l {log}"

